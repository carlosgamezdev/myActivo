{
  "Store": {
    "prefix": "Store",
    "scope": "typescript,javascript",
    "body": [
      "import { defineStore } from 'pinia'",
      "import { useAuthStore } from '../auth/authStore'",
      "import { useUiStore } from '../ui/uiStore'",
      "import { useRepoManager } from 'src/composables/useRepoManager'",
      "import { idProperty } from 'src/models/BaseModel'",
      "import { BaseDatabase, QueryOptions } from 'src/models/BaseDatabase'",
      "import { ${1:ModelName}Database } from './${1:ModelName}Database'",
      "import { ${1:ModelName}Repository } from './${1:ModelName}Repository'",
      "import ${1:ModelName}Model from 'src/models/${1:ModelName}Model'",
      "",
      "export interface ${1:ModelName}StateInterface {",
      "  Repo: ${1:ModelName}Repository",
      "  Db: ${1:ModelName}Database",
      "}",
      "",
      "export const use${1:ModelName}Store = defineStore('${1:ModelName}Store', {",
      "  state: () => (<${1:ModelName}StateInterface>{",
      "    Repo: new ${1:ModelName}Repository(),",
      "    Db: new ${1:ModelName}Database()",
      "  }),",
      "  actions: {",
      "    getRepoManager() {",
      "      return useRepoManager<${1:ModelName}Model,${1:ModelName}Repository,BaseDatabase<${1:ModelName}Model>>(this.Repo,this.Db)",
      "    },",
      "    subscribe(...queryOptions: QueryOptions[]) {",
      "      const authStore = useAuthStore()",
      "      const userId = authStore.loggedInUser?.id",
      "      const uiStore = useUiStore()",
      "",
      "      queryOptions.push({",
      "        queryPropertyName: 'user_id',",
      "        queryOperator: '==',",
      "        queryPropertyValue: userId",
      "      })",
      "",
      "      return this.Db.subscribeToCollection(",
      "        {",
      "          next: (querySnapshot) => {",
      "            let ent!: Partial<${1:ModelName}Model>",
      "",
      "            querySnapshot.docChanges().forEach((doc) => {",
      "              ent = doc.doc.data()",
      "              switch (doc.type) {",
      "                case 'added':",
      "                  if (typeof this.Repo.findById(ent[idProperty] as string) == 'undefined')",
      "                    this.Repo.add(ent)",
      "                  break;",
      "",
      "                case 'modified':",
      "                  this.Repo.update(ent)",
      "                break;",
      "",
      "                case 'removed':",
      "                  this.Repo.remove(ent)",
      "                break;",
      "              }",
      "            })",
      "            if(uiStore.loading) uiStore.loading = false",
      "          },",
      "        },",
      "        ...queryOptions",
      "      )",
      "    },",
      "    $0",
      "  }",
      "})"
    ],
    "description": "A new Pinia Store"
  },
  "Model": {
    "prefix": "Model",
    "scope": "typescript,javascript",
    "body": [
      "import { Model, Uid, Attr, Str, Num } from '@vuex-orm/core'",
      "",
      "export default class ${1:Name}Model extends Model {",
      "  static entity = '${2:entity_name}'",
      "  @Uid()",
      "  id!: string",
      "",
      "  @Attr(null)",
      "  user_id!: string | null",
      "",
      "  @Num(Date.now())",
      "  created_date!: number",
      "",
      "  $0",
      "}"
    ],
    "description": "Model"
  },
  "Converter": {
    "prefix": "Converter",
    "body": [
      "import { DocumentData, FirestoreDataConverter, QueryDocumentSnapshot, SnapshotOptions, WithFieldValue } from 'firebase/firestore'",
      "import ${1:Name}Model from './${1:Name}Model'",
      "",
      "export default class ${1:Name}Converter implements FirestoreDataConverter<${1:Name}Model> {",
      "  toFirestore(modelObject: WithFieldValue<${1:Name}Model>): DocumentData {",
      "    return {",
      "      id: modelObject.id,",
      "      modified: Date.now(),",
      "      $0",
      "    }",
      "  }",
      "  fromFirestore(snapshot: QueryDocumentSnapshot<${1:Name}Model>, options?: SnapshotOptions) {",
      "    const data = snapshot.data(options)",
      "    return data",
      "  }",
      "}"
    ],
    "description": "Converter"
  },
  "Repository": {
    "prefix": "Repository",
    "body": [
      "import { BaseRepository } from 'src/models/BaseRepository'",
      "import { idProperty, idPropertyType } from 'src/models/BaseModel'",
      "import ${1:Name}Model from 'src/models/${1:Name}Model'",
      "",
      "export class ${1:Name}Repository implements BaseRepository<${1:Name}Model> {",
      "",
      "  constructor() { this.collection = new Set<${1:Name}Model>() }",
      "",
      "  collection: Set<${1:Name}Model>",
      "",
      "  clear() { this.collection.clear() }",
      "",
      "  createModel(type: new (init?: Partial<${1:Name}Model>) => ${1:Name}Model, init?: Partial<${1:Name}Model>): ${1:Name}Model {",
      "    return new type(init)",
      "  }",
      "",
      "  asArray(): ${1:Name}Model[] {",
      "    return [...this.collection]",
      "  }",
      "",
      "  first(collection?: Set<${1:Name}Model>): ${1:Name}Model | undefined {",
      "    if (typeof collection == 'undefined') {",
      "      if (this.collection.size < 1) return undefined",
      "      else return this.asArray()[0]",
      "    }",
      "    else if (collection.size < 1) return undefined",
      "    else return [...collection][0]",
      "  }",
      "",
      "  find(entity: Partial<${1:Name}Model>): ${1:Name}Model | undefined {",
      "    if (typeof entity == 'undefined') return undefined",
      "    const entityObject = this.createModel(${1:Name}Model, entity)",
      "    if (this.collection.has(entityObject)) return entityObject",
      "    else return undefined",
      "  }",
      "",
      "  findById(id: idPropertyType): ${1:Name}Model | undefined {",
      "    const array = this.asArray()",
      "    const index = array.findIndex(e => e[idProperty] == id)",
      "    if (index == -1) return undefined",
      "    else return array[index]",
      "  }",
      "",
      "  all(): Set<${1:Name}Model> {",
      "    return this.collection",
      "  }",
      "",
      "  where(predicate: (value: ${1:Name}Model) => boolean): Set<${1:Name}Model> {",
      "    const array = this.asArray()",
      "    const filtered = array.filter(predicate)",
      "    const filteredSet = new Set<${1:Name}Model>(filtered)",
      "    return filteredSet",
      "  }",
      "",
      "  add(entity: Partial<${1:Name}Model>): Set<${1:Name}Model> {",
      "    const entityObject = this.createModel(${1:Name}Model, entity)",
      "    return this.collection.add(entityObject)",
      "  }",
      "",
      "  update(entity: Partial<${1:Name}Model>): Set<${1:Name}Model> {",
      "    const entityObject = this.createModel(${1:Name}Model, entity)",
      "    const entityToUpdate = this.findById(entityObject[idProperty])",
      "    if (typeof entityToUpdate !== 'undefined') Object.assign(entityToUpdate, entityObject)",
      "    else this.add(entityObject)",
      "    return this.collection",
      "  }",
      "",
      "  remove(entity: Partial<${1:Name}Model>): boolean {",
      "    const entityObject = this.findById(entity[idProperty] as string) as ${1:Name}Model",
      "    return this.collection.delete(entityObject)",
      "  }",
      "}",
      ""
    ],
    "description": "Repository"
  },
  "Database": {
    "prefix": "Database",
    "body": [
      "import { FirebaseDatabase } from '../firebase/FirebaseDatabase'",
      "import ${1:Name}Model from 'src/models/${1:Name}Model'",
      "import ${1:Name}ModelConverter from 'src/models/${1:Name}ModelConverter'",
      "",
      "export class ${1:Name}Database extends FirebaseDatabase<${1:Name}Model,${1:Name}ModelConverter> {",
      "  constructor() {",
      "    super(${1:Name}Model, ${1:Name}ModelConverter)",
      "  }",
      "}",
      ""
    ],
    "description": "Database"
  },
  "subscribeTo": {
    "prefix": "subsribeTo",
    "body": [
      "subscribeTo${1:Name}s(...queryOptions: QueryOptions[]) {",
      "      const authStore = useAuthStore()",
      "      const userId = authStore.loggedInUser?.id",
      "      const uiStore = useUiStore()",
      "",
      "      queryOptions.push({",
      "        queryPropertyName: 'user_id',",
      "        queryOperator: '==',",
      "        queryPropertyValue: userId",
      "      })",
      "",
      "      return this.${1:Name}sDb.subscribeToCollection(",
      "        {",
      "          next: (querySnapshot) => {",
      "            querySnapshot.docChanges().forEach((doc) => {",
      "              switch (doc.type) {",
      "                case 'added':",
      "                  this.${1:Name}Repo.add(doc.doc.data() as ${1:Name}Model)",
      "                  break;",
      "",
      "                case 'modified':",
      "                  this.${1:Name}Repo.update(doc.doc.data()  as ${1:Name}Model)",
      "                  break;",
      "",
      "                case 'removed':",
      "                  this.${1:Name}Repo.remove(doc.doc.data() as ${1:Name}Model)",
      "                  break;",
      "              }",
      "            })",
      "            uiStore.loading = false",
      "          },",
      "        },",
      "        ...queryOptions",
      "      )",
      "    }"
    ],
    "description": "subscribeTo"
  }
}
